if justneed to print then
inorder : 4 2 5 1 3 6
preorder: 1 2 4 5 3 6


Approach:  find the location of preorder[0] in inorder it will be root.
           the location on the left side has left subtree and right subtree on right side.
           
                            1
                   4 2 5           3 6
           now for left subtree find the pre[1] and repeat
                    2              3
                   4 5               6
                   
                   
printPostOrder(int in[], int pre[] , int n)
{
    int root=find(in, pre[0]);
      
    if(root!=0)
		PostOrder(in, Arrays.copyOfRange(pre,1,n) ,find);
		
		if(find!=n-1)
		PostOrder(Arrays.copyOfRange(in,root+1,n), Arrays.copyOfRange(in,root+1,n), n-root-1);
		
		System.out.println(in[find]);
}



2. If we want to make a tree then what we do is:
   we have preorder which will have root left and right.
   
   we just need this and inorder for complete infortmation.
   
   static int i=0;
   public static Node BuildTree(int in[], int pre[], int st, int end)
   {
   
          if(st>end)
          return null;
          
          Node x=pre[i];
          i++;
          
          if(st==end)
          return x;
          
          int loc=search(in, x.data , st, end)
          
          x.left=BuildTree(in, pre, st, loc-1);
          x.right=BuildTree(in, pre, st, loc-1);
          
          return x;
   }
                   
           
                            
